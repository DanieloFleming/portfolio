{"version":3,"sources":["NameSpace.js","Helper.js","Class.js","AssetsLoader.js","SpriteManager.js","AudioManager.js","CanvasManager.js","SpriteAnimator.js","CollisionDetect.js","GameArray.js","SpriteSheet.js","AudioBook.js","LoadScreen.js","StartScreen.js","GameObject.js","Explosion.js","Bullet.js","Ship.js","Meteorite.js","Meteor.js","HUD.js","Background.js","Level1.js","main.js"],"names":[],"mappingsvIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnvpGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACzFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjnGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChtfile":"game.js","sourcesContent":["(function() {\n    game = window.game || {};\n\n\n    var _namespaceMaker = function (namespace, fn) {\n\n        var names = namespace.split('.'),\n            base = game,\n            maxIndex = names.length - 1, i = 0;\n\n        if (names[0] == 'game') {\n            names = names.slice(1);\n        }\n\n\n        for (i; i < maxIndex; i++) {\n            if (typeof base[names[i]] == 'undefined') {\n                base[names[i]] = {};\n            }\n\n            base = base[names[i]];\n        }\n\n    };\n\n    NS = window.NS || _namespaceMaker;\n})();","(function(){\n    var _o = (function() {\n        var _each = function (value, callback, scope) {\n\n            if (_isArray(value)) {\n                _eachArray(value, callback, scope);\n            } else {\n                _eachObject(value, callback, scope);\n            }\n        };\n\n        var _eachArray = function (arr, callback, scope) {\n            for (var i = 0; i < arr.length; i++) {\n                _doCallBack(arr[i], i, callback, scope);\n            }\n        };\n\n        var _eachObject = function (obj, callback, scope) {\n            for (var key in obj) {\n                if (obj.hasOwnProperty(key)) {\n                    _doCallBack(obj[key], key, callback, scope);\n                }\n            }\n        };\n\n        var _doCallBack = function (value, index, callback, scope) {\n            if (typeof callback === 'function') {\n                if (scope) callback.call(scope, value, index);\n               else  callback(value, index);\n            }\n        };\n\n        var _isArray = function(value) {\n            return value instanceof Array || (value.length);\n        };\n\n        return {\n            each : _each,\n            isArray : _isArray\n        }\n    })();\n\n    _ = window._ || _o;\n\n})();","(function() {\n    NS('game.library.Class');\n\n    var Class = function () {};\n\n    Class.extend = function extend (props) {\n        var fn = props.constructor;\n\n        if (typeof fn !== 'function') {\n            throw new ClassConstructorException();\n        }\n\n        fn.prototype = this.prototype;\n        fn.prototype = Object.create(this.prototype);\n        fn.extend = extend;\n\n        for (var key in props) {\n            if (props.hasOwnProperty(key)) {\n                fn.prototype[key] = props[key];\n            }\n        }\n\n        return fn;\n    };\n\n    var ClassConstructorException = function() {\n        this.message = 'Invalid constructor provided. Constructor must be of type \"function\"';\n        this.name = 'ClassConstructorException';\n    };\n\n    game.library.Class = Class;\n})();","(function() {\n    NS('game.library.AssetsLoader');\n\n    var AssetsLoader = (function(){\n        var _assetsLoaded = 0;\n        var _assetCount;\n        var _onCompleted;\n        var _spriteAssets;\n        var _audioAssets;\n\n        /**\n         * Load Assets.\n         *\n         * @param spriteSheet\n         * @param AudioBook\n         * @param callback\n         * @private\n         */\n        var _loadAssets = function (spriteSheet, AudioBook, callback) {\n            _spriteAssets = spriteSheet;\n            _audioAssets = AudioBook;\n\n            _assetCount = Object.keys(_spriteAssets).length + Object.keys(_audioAssets).length;\n            _onCompleted = callback;\n\n            for (var key in _spriteAssets) {\n                if (_spriteAssets.hasOwnProperty(key)) {\n                    _loadAsset(_spriteAssets[key], key);\n                }\n            }\n\n            for (var note in _audioAssets) {\n                if (_audioAssets.hasOwnProperty(note)) {\n                    _loadAudio(_audioAssets[note], note);\n                }\n            }\n        }\n\n        /**\n         * Load sprites.\n         *\n         * @param value\n         * @param key\n         * @private\n         */\n        var _loadAsset = function (value, key) {\n            var image = new Image();\n                image.src = value.src;\n\n            image.onload = function () {\n                _saveAsset(key, image);\n            }\n        };\n\n        /**\n         * Load Audio.\n         *\n         * @param value\n         * @param key\n         * @private\n         */\n        var _loadAudio = function (value, key) {\n            var audio = new Audio(value);\n            \n            audio.oncanplaythrough = function () {\n                _audioAssets[key] = audio;\n                _assetsLoaded++;\n\n                audio.oncanplaythrough = null;\n                _checkAssetsLoader();\n            }\n        }\n\n        /**\n         * Store imageData in SpiteAssetsArray.\n         *\n         * @param key\n         * @param image\n         * @private\n         */\n        var _saveAsset = function (key, image) {\n            var asset = _spriteAssets[key];\n\n            asset.image = image;\n            asset.width = image.width / asset.frames;\n            asset.height = image.height;\n\n            _assetsLoaded++;\n\n            _checkAssetsLoader();\n        };\n\n        /**\n         * Check if all files are loaded\n         *\n         * @private\n         */\n        var _checkAssetsLoader = function () {\n            if (_assetsLoaded == _assetCount) {\n                _onCompleted(_spriteAssets);\n            }\n        }\n\n        /**\n         * Return all sprite assets.\n         *\n         * @returns {*}\n         * @private\n         */\n        var _getAllSprites = function () {\n            return _spriteAssets;\n        }\n\n        /**\n         * Return all audio assets.\n         *\n         * @returns {*}\n         * @private\n         */\n        var _getAllAudio = function () {\n            return _audioAssets;\n        }\n\n        /**\n         * publicly accessible methods.\n         */\n        return {\n            load: _loadAssets,\n            getSpriteData: _getAllSprites,\n            getAudioData: _getAllAudio\n        }\n    })();\n\n    game.library.AssetsLoader = AssetsLoader;\n\n})();","(function(){\n    NS('game.library.SpriteManager');\n\n    var SpriteManager = {\n        data : function(spriteData) {\n            this.spriteContainer = spriteData;\n        },\n\n        get : function(spriteName) {\n            return this.spriteContainer[spriteName];\n        }\n    };\n\n    game.library.SpriteManager = SpriteManager;\n})();","(function(){\n    NS('game.library.AudioManager');\n\n    var SOUND_ON = true;\n    var SOUND_OFF = false;\n\n    var AudioManager = {\n\n        sound : SOUND_ON,\n\n        data : function(audioData) {\n            this.audioContainer = audioData;\n        },\n\n        playFX : function(audioName) {\n            if(this.sound == SOUND_ON) {\n                this.audioContainer[audioName].cloneNode(true).play();\n            }\n        },\n\n        playMusic : function(audioName) {\n            if(this.sound == SOUND_ON) {\n                this.checkIfPlaying(audioName);\n                this.currentBgm = audioName;\n                this.audioContainer[audioName].volume = .5;\n                this.audioContainer[audioName].play();\n                this.audioContainer[audioName].addEventListener('ended', this.replay.bind(this));\n            } else {\n                this.currentBgm = audioName;\n            }\n        },\n\n        play : function(audioName) {\n            this.audioContainer[audioName].play();\n        },\n\n        stop : function(audioName) {\n            this.audioContainer[audioName].pause();\n            this.audioContainer[audioName].currentTime = 0;\n        },\n\n        checkIfPlaying : function(audioName) {\n            if(!this.currentBgm) return;\n            if(this.currentBmg !== audioName && this.audioContainer[this.currentBgm].pause) {\n                this.stopMusic(this.currentBgm);\n            }\n        },\n\n        stopMusic : function(audioName) {\n            this.audioContainer[audioName].pause();\n            this.audioContainer[audioName].currentTime = 0;\n            this.audioContainer[audioName].removeEventListener('ended', this.replay.bind(this));\n            this.currentBgm = false;\n        },\n\n        replay : function() {\n            this.audioContainer[this.currentBgm].currentTime = 0;\n            this.audioContainer[this.currentBgm].play();\n        },\n\n        enableSound : function() {\n            this.sound = SOUND_ON;\n\n            if(this.currentBgm) {\n                this.playMusic(this.currentBgm);\n            }\n        },\n\n        disableSound : function() {\n            this.sound = SOUND_OFF;\n\n            if(this.currentBgm) {\n                var cache = this.currentBgm;\n                this.stopMusic(this.currentBgm);\n                this.currentBgm = cache;\n            }\n        },\n\n        toggleSound : function() {\n            if(this.sound == SOUND_ON) {\n                this.disableSound();\n            } else {\n                this.enableSound();\n            }\n        }\n    };\n\n    game.library.AudioManager = AudioManager;\n})();","(function(){\n    NS('game.library.CanvasManager');\n\n    var CanvasManager = {\n\n        element : [],\n\n        context : [],\n\n        setCanvas : function(canvasId) {\n            this.element[canvasId] = document.getElementById(canvasId);\n            this.context[canvasId] = this.element[canvasId].getContext('2d');\n            //this.context[canvasId].globalCompositeOperation = 'destination-over';\n\n            this.width = this.element[canvasId].width;\n            this.height = this.element[canvasId].height;\n        },\n\n        getCanvas : function(canvasId) {\n            return this.element[canvasId];\n        },\n\n        getContext : function(canvasId) {\n            return this.context[canvasId];\n        },\n\n        clearContext : function(width, height) {\n            for(var key in this.context) {\n                if(this.context.hasOwnProperty(key)){\n                    this.context[key].clearRect(0, 0, width, height);\n                }\n            }\n        }\n    };\n\n    game.library.CanvasManager = CanvasManager;\n\n})();","(function(){\n\n    NS('game.library.SpriteAnimator');\n\n    var SpriteAnimator = function(spriteData, ctx) {\n        SpriteAnimator.prototype.ctx = ctx;\n        this.sprite = spriteData;\n        this.isAnimating = false;\n    };\n\n    SpriteAnimator.prototype.draw = function(x, y, frame) {\n        this.currentFrame = frame || 0;\n        this._draw(x, y);\n    };\n\n    SpriteAnimator.prototype.playOnce = function(sequenceName, x, y, callBack) {\n        this._play(sequenceName, x, y, callBack || function(){});\n    };\n\n    SpriteAnimator.prototype.playLoop = function(sequenceName, x, y) {\n        this._play(sequenceName, x, y, this._resetFrame.bind(this, sequenceName));\n    };\n\n    SpriteAnimator.prototype._play = function(sequenceName, x, y, callBack) {\n\n        if(! this.currentFrame || this.currentSequence != sequenceName) {\n            this.currentFrame = this.sprite.frameSet[sequenceName][0];\n            this.endFrame = this.sprite.frameSet[sequenceName][1];\n            this.currentSequence = sequenceName;\n            this.isAnimating = true;\n        }\n\n        if(this.currentFrame < this.endFrame) {\n            this._draw(x, y);\n            this.currentFrame++;\n        }\n\n        if(this.currentFrame + 1 == this.endFrame) {\n            this.isAnimating = false;\n            callBack();\n        }\n    };\n\n    SpriteAnimator.prototype._draw = function(x, y) {\n        this.ctx.drawImage(\n            this.sprite.image,\n            this.currentFrame * this.sprite.width, 0,\n            this.sprite.width, this.sprite.height,\n            x, y,\n            this.sprite.width, this.sprite.height\n        );\n    };\n\n    SpriteAnimator.prototype._resetFrame = function(sequenceName) {\n        this.currentFrame = this.sprite.frameSet[sequenceName][0];\n        this.isAnimating = true;\n    };\n\n    SpriteAnimator.prototype.setSprite = function(newSpriteData) {\n        this.sprite = newSpriteData;\n    };\n\n    game.library.SpriteAnimator = SpriteAnimator;\n\n})();","(function(){\n    NS('game.library.CollisionDetect');\n    var CollisionDetect = function() {};\n\n    CollisionDetect.prototype.check = function(arr1, arr2, callback) {\n        for(var i = 0; i < arr1.length; i++) {\n            var a = arr1[i];\n\n            for(var n = 0; n < arr2.length; n++) {\n                var b = arr2[n];\n\n                if(this.checkHit(a, b)) {\n                    return (callback) ? callback(a, b) : true;\n                }\n            }\n        }\n    }\n\n    CollisionDetect.prototype.checkHit = function(a, b) {\n        if(a.isAlive === false || b.isAlive == false) return false;\n\n        return a.x < b.x + b.width\n            && a.x + a.width > b.x\n            && a.y < b.y + b.height\n            && a.y + a.height > b.y\n    }\n\n    game.library.CollisionDetect = new CollisionDetect();\n\n})();","(function(){\n    NS('game.library.GameArray');\n    var GameComponent = function(){};\n\n    GameComponent.prototype = Array.prototype;\n\n    GameComponent.prototype.add = GameComponent.prototype.push;\n\n    GameComponent.prototype.addArray = function(arr) {\n        var i = 0, l = arr.length;\n\n        for (i; i < arr.length; i++) {\n            this.add(arr[i]);\n        }\n    };\n\n    GameComponent.prototype.remove = function(component) {\n        this.splice(this.indexOf(component), 1);\n    };\n\n    game.library.GameArray = GameComponent;\n\n})();","var SpriteSheet = {\n\n    ship : {\n        src :'img/ship5.png',\n        frames : 4\n    },\n\n    bullet : {\n        src : 'img/bullet.png',\n        frames : 1\n    },\n\n    explosion_1 : {\n        src : 'img/explosion/ex-1-a.png',\n        frames : 40,\n        frameSet : {\n            explode : [0, 40]\n        }\n    },\n\n    explosion_2 : {\n        src : 'img/explosion/ex-2.png',\n        frames : 48,\n        frameSet : {\n            explode : [0, 48]\n        }\n    },\n\n    explosion_small_1 : {\n        src : 'img/explosion/ex-small-1.png',\n        frames : 40,\n        frameSet : {\n            explode : [0, 40]\n        }\n    },\n\n    explosion_small_2 : {\n        src : 'img/explosion/ex-small-2.png',\n        frames : 64,\n        frameSet : {\n            explode : [0, 64]\n        }\n    },\n\n    explosion_small_3 : {\n        src : 'img/explosion/ex-small-3.png',\n        frames : 8,\n        frameSet : {\n            explode : [0, 8]\n        }\n    },\n\n    explosion_small_4 : {\n        src : 'img/explosion/ex-small-4.png',\n        frames : 10,\n        frameSet : {\n            explode : [0, 10]\n        }\n    },\n    meteor_1 : {\n        src : 'img/meteor/meteor_1.png',\n        frames : 2\n    },\n    meteor_2 : {\n        src : 'img/meteor/meteor_2.png',\n        frames : 2\n    },\n    meteorite_1 : {\n        src : 'img/meteor/s_1.png',\n        frames : 1\n    },\n    meteorite_2 : {\n        src : 'img/meteor/s_2.png',\n        frames : 1\n    },\n    background : {\n        src : 'img/dark-purple.png',\n        frames : 1\n    },\n    live : {\n        src : 'img/live.png',\n        frames : 1\n    }\n};","var AudioBook = {\n    explode : 'audio/explode.mp3',\n    laser : 'audio/pewV2.mp3',\n    //chopper : 'audio/chopper.mp3',\n    level1 : 'audio/bg.mp3',\n    pew : 'audio/pew.mp3',\n    coin : 'audio/coin.mp3',\n    bgmIntro : 'audio/main-theme.mp3'\n};","(function(AssetsLoader){\n    NS('game.screen.LoadScreen');\n\n    var CLASS_NAME = '.load-screen';\n\n    var LoadScreen = function (sprites, audio) {\n        this.loadScreen = document.querySelector(CLASS_NAME);\n\n        AssetsLoader.load(sprites, audio, this.loadCompleted.bind(this));\n    };\n\n    LoadScreen.prototype.loadCompleted = function() {\n\n        this.loadScreen.classList.add('hide');\n\n        this.callback(\n            game.library.AssetsLoader.getSpriteData(),\n            game.library.AssetsLoader.getAudioData()\n        );\n    };\n\n    LoadScreen.prototype.onCompleted = function(callback) {\n        this.callback = callback;\n    };\n\n    game.screen.LoadScreen = LoadScreen;\n\n})(game.library.AssetsLoader);","(function(){\n\n    NS('game.screen.StartScreen');\n\n    var BTN_START = 'btn-play';\n    var BTN_SOUND = 'btn-sound';\n    var CLASS_NAME = '.start-screen';\n    var BG_MUSIC = 'bgmIntro';\n\n    var StartScreen = function() {\n        game.library.AudioManager.playMusic(BG_MUSIC);\n        this.startScreen = document.querySelector(CLASS_NAME);\n        this.initialize();\n    };\n\n    StartScreen.prototype.initialize = function() {\n        this.startBtn = this.startScreen.querySelector('.' + BTN_START);\n        this.soundBtn = this.startScreen.querySelector('.' + BTN_SOUND);\n\n        this.addEvents();\n    };\n\n    StartScreen.prototype.addEvents = function() {\n        this.soundBtn.addEventListener('click', this.handleClick.bind(this));\n        this.startBtn.addEventListener('click', this.handleClick.bind(this));\n\n        this.soundBtn.addEventListener('mouseenter', this.handleMouseEnter.bind(this));\n        this.startBtn.addEventListener('mouseenter', this.handleMouseEnter.bind(this));\n    };\n\n    StartScreen.prototype.handleClick = function(e) {\n        var button = e.currentTarget.getAttribute('data-btn');\n\n        switch(button) {\n            case BTN_START:\n                this.startGame();\n                break;\n            case BTN_SOUND:\n                this.toggleSound();\n                break;\n        }\n    };\n\n    StartScreen.prototype.handleMouseEnter = function(e) {\n        game.library.AudioManager.playFX('pew');\n    };\n\n    StartScreen.prototype.startGame = function() {\n        game.library.AudioManager.stopMusic(BG_MUSIC);\n        game.library.AudioManager.playFX('coin');\n\n        this.startScreen.classList.add('hide');\n        this.onStartCallback();\n    };\n\n    StartScreen.prototype.toggleSound = function() {\n        game.library.AudioManager.toggleSound();\n    };\n\n    StartScreen.prototype.onStart = function(callback) {\n        this.onStartCallback = callback;\n    };\n\n    StartScreen.prototype.show = function() {\n        game.library.AudioManager.playMusic(BG_MUSIC);\n\n        this.startScreen.classList.remove('hide');\n    };\n\n    game.screen.StartScreen = StartScreen;\n\n})();","(function(Class, SpriteAnimator, SpriteManager){\n    NS('game.component.GameObject');\n\n    var GameObject = Class.extend({\n        type : 'GameObject',\n\n        constructor : function GameObject(spriteName) {\n            this._spriteData = SpriteManager.get(spriteName);\n            this._animator = new SpriteAnimator(this._spriteData, this.ctx);\n            this.width = this._spriteData.width;\n            this.height = this._spriteData.height;\n            this.xCenter = this.width / 2;\n            this.yCenter = this.height / 2;\n            this.destroy = false;\n            this.isActive = true;\n        },\n\n        draw : function() {\n            //override this method\n        },\n\n        update : function(gameTime, timestamp) {\n            //override this method\n        },\n\n        ticker : function(tickName, ms, fn) {\n            var timeName = tickName + 'Stamp';\n            var timestamp = performance.now();\n            if(!this[timeName]) this[timeName] = timestamp;\n\n            var progress = timestamp - this[timeName];\n\n            if(progress > ms) {\n                fn(timeName);\n                this[timeName] = false;\n            }\n        }\n    });\n\n    GameObject.setContext = function(ctx) {\n        this.prototype.ctx = ctx;\n    };\n\n    game.component.GameObject = GameObject;\n\n})(game.library.Class, game.library.SpriteAnimator, game.library.SpriteManager);\n\n","(function(GameObject, AudioManager){\n\n    NS('game.component.explosion.Explosion');\n\n    var Explosion = GameObject.extend({\n\n        constructor : function Explosion(x, y, type) {\n            this.spriteName = (type) ? type : 'explosion_2';\n            this.x = x;\n            this.y = y;\n\n            GameObject.call(this, this.spriteName);\n\n            AudioManager.playFX('explode');\n        },\n\n        draw : function() {\n            this._animator.playOnce(\n                'explode',\n                this.x - this.xCenter,\n                this.y - this.yCenter,\n                this.completed.bind(this)\n            );\n        },\n\n        completed : function() {\n            if(this.doOnCompleted) this.doOnCompleted(this);\n            this.doOnCompleted = null;\n            this.isActive = false;\n        },\n\n        onCompleted : function(callback) {\n            this.doOnCompleted = callback;\n        }\n    });\n\n    Explosion.type = {\n        BIG_1 : 'explosion_1',\n        BIG_2 : 'explosion_2',\n        SMALL_1 : 'explosion_small_1'\n    };\n\n    game.component.explosion.Explosion = Explosion;\n\n})(game.component.GameObject, game.library.AudioManager);","(function(GameObject, AudioManager){\n    NS('game.component.weapon.Bullet');\n\n    var Bullet = GameObject.extend({\n\n        spriteName : 'bullet',\n\n        type : 'bullet',\n\n        power : 5,\n\n        speed : 20,\n\n        constructor : function Bullet(x, y) {\n            this.x = x;\n            this.y = y;\n\n            AudioManager.playFX('laser');\n\n            GameObject.call(this, this.spriteName);\n        },\n\n        draw : function() {\n            this._animator.draw(this.x - this.xCenter, this.y);\n        },\n\n        update : function(gameTime, timestamp) {\n            this.y -= this.speed;\n\n            this.checkBound();\n        },\n\n        checkBound : function() {\n            if(!this.isInactive) {\n                if(this.y < -this.height) this.destroy = true;\n            }\n        },\n\n        hit : function() {\n            this.destroy = true;\n        },\n\n    });\n\n    game.component.weapon.Bullet = Bullet;\n\n})(game.component.GameObject, game.library.AudioManager);","(function(GameObject, Bullet, GameArray, Explosion){\n\n    NS('game.component.player.Ship');\n\n    var Ship = GameObject.extend({\n\n        bullets : new GameArray(),\n\n        constructor : function Ship(x, y) {\n            this.spriteName = 'ship';\n            this.type = 'player';\n            this.x = x;\n            this.y = y;\n            this.reloadTime = 150;\n            this.recoverTime = 1000;\n            this.isHit = false;\n            this.points = 1000;\n            this.frame = 0;\n\n            GameObject.call(this, this.spriteName);\n        },\n\n        draw : function(){\n            this._animator.draw(this.x, this.y, this.frame);\n        },\n\n        update : function() {\n            this.x += ((game.mouseX - this.xCenter) - this.x) / 20;\n            this.y += ((game.mouseY - this.yCenter) - this.y) / 20;\n\n            this.autoFire();\n            if(this.isHit) {\n                this.recover();\n            }\n        },\n\n        hit : function() {\n            this.isActive = false;\n\n            if (this.frame > 2) {\n                this.dead = true;\n                this.explode();\n            } else {\n                this.isHit = true;\n                this.frame++;\n            }\n        },\n\n        recover : function() {\n            this.ticker('recover', this.recoverTime, this.recovered.bind(this))\n        },\n\n        recovered : function() {\n            this.isHit = false;\n            if(this.dead === true) return;\n            this.isActive = true;\n        },\n\n        autoFire : function() {\n            if(this.dead || this.toDraw === false) return;\n            this.ticker('fire', this.reloadTime, this.fire.bind(this));\n        },\n\n\n        fire : function() {\n            var bullet = new Bullet(this.x + this.xCenter, this.y + this.yCenter);\n\n            GameComponents.add(bullet);\n\n            this.bullets.push(bullet);\n        },\n\n        explode : function() {\n            this.toDraw = false;\n            var ex = new Explosion(this.x + this.xCenter, this.y + this.yCenter, Explosion.type.BIG_2);\n\n            ex.onCompleted(this.cleanUp.bind(this));\n\n            GameComponents.add(ex);\n        },\n\n        cleanUp : function(ex) {\n            GameComponents.remove(ex);\n\n            this.isHit = false;\n            this.dead = false;\n            //this.toDraw = this.draw.bind(this);\n            this.frame = 0;\n            this.gameOver();\n        }\n    });\n\n    game.component.player.Ship = Ship;\n\n})(\n    game.component.GameObject,\n    game.component.weapon.Bullet,\n    game.library.GameArray,\n    game.component.explosion.Explosion);\n\n","(function(GameObject, Explosion){\n    NS('game.component.meteor.Meteorite');\n\n    var MODE_LEFT = 0;\n    var MODE_RIGHT = 1;\n\n    var sprites = ['meteorite_1', 'meteorite_2'];\n\n    var EXPLOSION_TYPE = 0;\n\n    var Meteorite = GameObject.extend({\n\n        constructor : function Meteor(x, y, direction) {\n\n            this.x = x;\n            this.y = y;\n            this.spriteName = sprites[Math.round(Math.random())];\n            this.hp = 5;\n            this.speed = 16;\n            this.points = 100;\n\n            GameObject.call(this, this.spriteName);\n\n            this.setVelocities(direction)\n        },\n\n        setVelocities : function(mode) {\n            var speed = (Math.random() * 3);\n\n            if(mode === MODE_LEFT) {\n                this.speedX = speed * -1;\n                this.x += -10;\n            } else {\n                this.speedX = speed;\n                this.x += 10;\n            }\n\n            this.speedY = (Math.random() * 4);\n        },\n\n        draw : function() {\n            this._animator.draw(this.x, this.y);\n        },\n\n        update : function() {\n            this.y += this.speedY;\n\n            this.x += this.speedX;\n\n            this.checkBound();\n        },\n\n        checkBound : function() {\n            if(!this.isInactive) {\n                if(this.y > CANVAS_HEIGHT || this.x < -this.width || this.x > CANVAS_WIDTH) {\n                    this.destroy = true;\n                }\n            }\n        },\n\n        hit : function(damage) {\n\n            this.hp -= damage;\n            this.speed++;\n\n            if(this.hp <= 0) {\n                this.explode();\n            }\n        },\n\n        explode : function() {\n            this.killed = true;\n            this.toDraw = false;\n            this.isActive = false;\n\n            var ex = new Explosion(this.x + this.xCenter, this.y + this.yCenter, Explosion.type.SMALL_1);\n            ex.onCompleted(this.cleanUp.bind(this));\n\n            GameComponents.add(ex);\n        },\n\n        cleanUp : function(ex) {\n            GameComponents.remove(ex);\n            this.destroy = true;\n        }\n    });\n\n    game.component.meteor.Meteorite = Meteorite;\n\n})(game.component.GameObject, game.component.explosion.Explosion);","(function(GameObject, Explosion, Meteorite){\n    NS('game.component.meteor.Meteor');\n\n    var sprites = ['meteor_1', 'meteor_2'];\n\n    var Meteor = GameObject.extend({\n\n        constructor : function Meteor(x, y) {\n\n            this.x = x;\n            this.y = y;\n            this.spriteName = sprites[Math.round(Math.random())];\n            this.hp = 10;\n            this.frame = 0;\n            this.speed = 2;\n            this.points = 300;\n\n            GameObject.call(this, this.spriteName);\n        },\n\n        draw : function() {\n            this._animator.draw(this.x, this.y, this.frame);\n        },\n\n        update : function() {\n            this.y += this.speed;\n\n            this.checkBound();\n        },\n\n        checkBound : function() {\n            if(!this.isInactive) {\n                if(this.y > CANVAS_HEIGHT) {\n                    this.destroy = true;\n                }\n            }\n        },\n\n        hit : function(damage) {\n\n            this.hp -= damage;\n            this.frame++;\n            this.speed--;\n\n            if(this.hp <= 0) {\n                this.explode();\n            }\n        },\n\n        explode : function(isDead) {\n            this.killed = true;\n            this.toDraw = false;\n            this.isActive = false;\n\n            var ex = new Explosion(this.x + this.xCenter, this.y + this.yCenter, Explosion.type.BIG_2);\n                ex.onCompleted(this.cleanUp.bind(this));\n\n            GameComponents.add(ex);\n\n            if(isDead) return;\n            this.createMeteorite();\n        },\n\n        createMeteorite : function() {\n            var m1 = new Meteorite(this.x, this.y + this.yCenter, 0);\n            var m2 = new Meteorite(this.x + this.width, this.y + this.yCenter, 1);\n\n            GameComponents.addArray([m1, m2]);\n\n            LevelContent.enemies.addArray([m1, m2])\n        },\n\n        cleanUp : function(ex) {\n            GameComponents.remove(ex);\n\n            this.destroy = true;\n        }\n    });\n\n    game.component.meteor.Meteor = Meteor;\n\n})(game.component.GameObject, game.component.explosion.Explosion, game.component.meteor.Meteorite);","(function(GameObject, SpriteManager){\n    NS('game.component.HUD');\n\n    var HUD = GameObject.extend({\n        score : 0,\n        textScore : 0,\n        lives :3,\n        shakeTime : 60,\n        zeros : '000000',\n\n        settings : {\n            font : \"24pt 'Kenvector Future'\",\n            shadowBlur : 4,\n            shadowColor : 'grey',\n            textAlign : 'end',\n            textBaseline : 'buttom',\n            fillStyle : '#fff'\n        },\n\n        constructor : function HUD(element) {\n            this.element = element;\n            this.imageData = SpriteManager.get('live');\n            this.ctx.translate(0.5, 0.5);\n            this.setupContext();\n            this.addScore(0);\n        },\n\n        restart : function() {\n            this.score = 0;\n            this.textScore = 0;\n            this.lives = 3;\n            this.addScore(0);\n        },\n\n        setupContext : function() {\n            _.each(this.settings, this.applyContextSettings, this);\n        },\n\n        applyContextSettings : function(value, settingName) {\n            this.ctx[settingName] = value;\n        },\n\n        draw : function() {\n            this.setupContext();\n            this.ctx.fillText(this.textScore, CANVAS_WIDTH - 10,  CANVAS_HEIGHT - 10);\n            this.showLives();\n        },\n\n        showLives : function() {\n            for(var i = 0; i < this.lives; i++) {\n                this.ctx.drawImage(this.imageData.image, this.imageData.width * i + 20, CANVAS_HEIGHT - 40);\n            }\n        },\n\n        update : function() {\n            if(this.isHit) {\n                this.shakeScreen();\n            }\n        },\n\n        addScore : function(points) {\n            this.score += points;\n            var s = this.zeros + this.score;\n            this.textScore = s.substr(s.length - this.zeros.length);\n        },\n\n        hit : function() {\n            this.lives--;\n            this.isHit = true;\n        },\n\n        shakeScreen : function() {\n            var val = - this.shakeTime + Math.round(Math.random() * this.shakeTime);\n\n            if(this.shakeTime > 0) {\n                this.shakeTime -= 1.4;\n                this.element.style.transform = 'translate(' + val +'px, ' + val + 'px)';\n            } else {\n                this.isHit = false;\n                this.shakeTime = 60;\n                this.element.style.transform = 'translate(0, 0)';\n            }\n        },\n\n        reset : function() {\n            this.score = 0;\n            this.textScore = 0;\n            this.lives =3;\n            this.shakeTime = 60;\n            this.zeros = '000000';\n        }\n\n    });\n\n    HUD.setContext = function(ctx) {\n        this.prototype.ctx = ctx;\n    };\n\n    game.component.HUD = HUD;\n})(game.component.GameObject, game.library.SpriteManager);","(function(Class, SpriteManager){\n    NS('game.component.background.Background');\n\n    var Background = Class.extend({\n\n        constructor : function Background() {\n            this._spriteData = SpriteManager.get('background');\n            this.width = this._spriteData.width;\n            this.height = this._spriteData.height;\n            this.x  = 0;\n            this.y = 0;\n            this.speed = 3;\n            this.createBackground();\n        },\n\n        createBackground : function() {\n\n            var repeat = {\n                x : Math.ceil(CANVAS_WIDTH / this.width) + 1,\n                y : Math.ceil(CANVAS_HEIGHT / this.height) + 1\n            };\n\n\n            this.pattern = [];\n\n            this.startPos = CANVAS_HEIGHT - (repeat.y * this.height);\n\n            for(var i = 0; i < repeat.x; i++) {\n\n                for(var n = 0; n < repeat.y; n++) {\n                    this.pattern.push([-this.width + (i * this.width), -this.height + (n * this.height)]);\n                }\n            }\n\n            this.repeat = repeat\n        },\n\n        draw : function() {\n\n            for(var i = 0; i < this.pattern.length; i++) {\n                if(this.pattern[i][1] > CANVAS_HEIGHT) {\n                    this.pattern[i][1] = this.startPos;\n                }\n\n                this.ctx.drawImage(this._spriteData.image, 0, 0,\n                    this.width, this.height,\n                    this.pattern[i][0] + this.x, this.pattern[i][1]+= this.speed,\n                    this.width, this.height\n                )\n            }\n        },\n\n        update : function() {\n            this.speed = 3 + (.005 * game.mouseY);\n        }\n\n    });\n\n    Background.setContext = function(ctx) {\n        this.prototype.ctx = ctx;\n    };\n\n    game.component.background.Background = Background;\n\n})(game.library.Class, game.library.SpriteManager);","(function(AudioManager, GameArray, Meteor, CollisionDetect){\n    NS('game.component.level.Level1');\n\n    var TYPE_ENEMY = 'enemy';\n    var TYPE_WEAPON = 'weapon';\n\n    var Level1 = game.component.GameObject.extend({\n\n        constructor : function Level1(player, hud) {\n            this.makeTime = 1000;\n            this.container = new GameArray();\n            this.player = player;\n            this.hud = hud;\n\n            AudioManager.playMusic('level1');\n\n            this.setup();\n        },\n\n        setup : function() {\n            this.player.gameOver = this.gameOver.bind(this);\n        },\n\n        restart : function() {\n            this.player.toDraw = true;\n            this.player.isActive = true;\n            this.gameEnded = false;\n            this.hud.restart();\n        },\n\n        update : function() {\n            this.checkIfInactive();\n            this.createLevel();\n            this.checkCollisions();\n        },\n\n        checkCollisions : function() {\n            for(var i = 0; i < LevelContent.enemies.length; i++) {\n\n                var enemy = LevelContent.enemies[i];\n\n                if(!enemy.isActive) continue;\n\n                if (this.player.isActive && CollisionDetect.checkHit(enemy, this.player)) {\n                    enemy.hit(this.player.points);\n                    this.player.hit();\n                    this.hud.hit();\n                }\n\n                for(var n =0; n < this.player.bullets.length; n++) {\n\n                    var bullet = this.player.bullets[n];\n\n                    if(! bullet.isActive) continue;\n\n                    if(CollisionDetect.checkHit(enemy, bullet)) {\n                        enemy.hit(bullet.power);\n                        bullet.hit();\n                    }\n                }\n            }\n        },\n\n\n        checkIfInactive : function() {\n\n            _.each(LevelContent.enemies, function(enemy){\n                if(enemy.killed) {\n                    this.hud.addScore(enemy.points);\n                    enemy.killed = null;\n                }\n\n                if(enemy.destroy) {\n                    this.removeComponent(enemy, TYPE_ENEMY);\n                }\n            }, this);\n\n            _.each(this.player.bullets, function(bullet) {\n                if(bullet.destroy) {\n                    this.removeComponent(bullet, TYPE_WEAPON);\n                }\n            }, this);\n        },\n\n        removeComponent : function(component, type) {\n            if(type === TYPE_ENEMY) {\n                LevelContent.enemies.remove(component);\n\n            } else if(type === TYPE_WEAPON) {\n                this.player.bullets.remove(component);\n\n            }\n\n            GameComponents.remove(component);\n\n            if(this.gameEnded && LevelContent.enemies.length == 0) {\n                this.showStartScreen();\n            }\n        },\n\n        createLevel : function() {\n            if(!this.gameEnded) {\n                this.ticker('meteor', this.makeTime, this.addMeteor.bind(this));\n            }\n        },\n\n        addMeteor : function() {\n            var meteor = new Meteor(100 + (Math.ceil(Math.random() * CANVAS_WIDTH - 200)), -80);\n\n            GameComponents.add(meteor);\n\n            LevelContent.enemies.add(meteor);\n\n            this.makeTime = (this.makeTime >  500) ? this.makeTime - 100 : 500;\n        },\n\n        gameOver : function() {\n            this.gameEnded = true;\n            _.each(LevelContent.enemies, this.explode, this);\n        },\n\n        explode : function(enemy) {\n            enemy.explode();\n        }\n\n    });\n\n    game.component.level.Level1 = Level1;\n\n})(\n    game.library.AudioManager,\n    game.library.GameArray,\n    game.component.meteor.Meteor,\n    game.library.CollisionDetect\n);",";(function(CanvasManager, SpriteManager, AudioManager, GameArray) {\n\n    window.CANVAS_WIDTH = MAX_WIDTH = 1200;\n    window.CANVAS_HEIGHT = MAX_HEIGHT =  800;\n\n    window.GameComponents = null;\n    window.LevelContent = null;\n\n    TYPE_MOUSEDOWN = 'mousedown';\n    TYPE_MOUSEUP = 'mouseup';\n\n    CANVAS_PLAY = 'playfield';\n    CANVAS_BG = 'background';\n    CANVAS_HUD = 'hud';\n\n    /**\n     * imports\n     */\n    var component = game.component;\n    var canvasIds = [CANVAS_PLAY, CANVAS_BG, CANVAS_HUD];\n    var startScreen;\n    var container;\n    var lastTime;\n    var background;\n    var player = null;\n    var level = null;\n    var hud = null;\n\n    function initialize() {\n        AudioManager.disableSound();\n\n        GameComponents = new GameArray();\n\n        LevelContent = {\n            enemies : new GameArray(),\n            bullets : new GameArray()\n        };\n        \n        container = document.querySelector('#container');\n\n        var loadScreen = new game.screen.LoadScreen(SpriteSheet, AudioBook);\n            loadScreen.onCompleted(assetsLoaded);\n\n        setGameWidth(window.innerWidth, window.innerHeight);\n\n        setupCanvas();\n    }\n\n    function setGameWidth(width, height) {\n        if(!canvasses) {\n            var canvasses = document.querySelectorAll('.canvas');\n        }\n\n        var sw = (width > MAX_WIDTH) ? MAX_WIDTH : width;\n        var sh = (height > MAX_HEIGHT) ? MAX_HEIGHT : height;\n\n        var w = CANVAS_WIDTH = (sw) ? sw : CANVAS_WIDTH;\n        var h = CANVAS_HEIGHT = (sh) ? sh: CANVAS_HEIGHT;\n\n\n        _.each(canvasses, function(element){\n            if(element.nodeName === 'CANVAS') {\n                element.width = w;\n                element.height = h;\n            } else {\n                element.style.width = w + 'px';\n                element.style.height = h+ 'px';\n            }\n        });\n\n        if(background) {\n            background.createBackground();\n        }\n    }\n\n    function setupCanvas() {\n        _.each(canvasIds, function(id){\n            CanvasManager.setCanvas(id);\n        });\n\n        component.GameObject.setContext(CanvasManager.getContext(CANVAS_PLAY));\n        component.background.Background.setContext((CanvasManager.getContext(CANVAS_BG)));\n        component.HUD.setContext(CanvasManager.getContext(CANVAS_HUD));\n\n        gameLoop(new Date());\n    }\n\n    function assetsLoaded(spriteData, audioData) {\n        SpriteManager.data(spriteData);\n        AudioManager.data(audioData);\n\n\n        addEvents();\n        showStart();\n    }\n    function addEvents() {\n        game.mouseX = 100;\n        game.mouseY = 100;\n\n        //container.addEventListener('mousedown', handleMouseClick);\n        //container.addEventListener('mouseup', handleMouseClick);\n        container.addEventListener('mousemove', handleMouseMove);\n        container.addEventListener('touchstart', handleTouch);\n         container.addEventListener('touchmove', handleTouch);\n        window.addEventListener('resize', handleResize);\n    }\n\n    function handleMouseClick(e) {\n        var eventType = e.type;\n\n        switch(eventType) {\n            case TYPE_MOUSEUP:\n                break;\n            case TYPE_MOUSEDOWN:\n                break\n        }\n    }\n\n    function handleMouseMove(e) {\n        game.mouseX = e.pageX - container.offsetLeft;\n        game.mouseY = e.pageY - container.offsetTop;\n    }\n\n    function handleTouch(e) {\n        e.preventDefault();\n        var touch = e.changedTouches[0];\n        \n        game.mouseX = (touch.pageX - container.offsetLeft);\n        game.mouseY = (touch.pageY - container.offsetTop);\n    }\n\n    function handleResize(e) {\n        setGameWidth(window.innerWidth, window.innerHeight);\n    }\n\n    function showStart() {\n        startScreen = new game.screen.StartScreen();\n        startScreen.onStart(startGame);\n\n        background = new component.background.Background();\n        GameComponents.add(background);\n    }\n\n    function startGame() {\n        if(player === null) loadComponents();\n        level.restart();\n\n        GameComponents.addArray([player, level, hud]);\n    }\n\n    function loadComponents() {\n        player = new component.player.Ship(100, 100);\n        hud = new component.HUD(container);\n        level = new component.level.Level1(player, hud);\n        \n        level.showStartScreen = gameOver;\n    }\n\n    function gameOver() {\n        GameComponents.remove(player);\n        GameComponents.remove(hud);\n        GameComponents.remove(level);\n        startScreen.show();\n    }\n\n    function gameLoop(timestamp) {\n        var now = Date.now();\n        var gameTime = (now - lastTime) / 1000;\n\n        update(gameTime, timestamp);\n        lastTime = now;\n\n        requestAnimationFrame(gameLoop);\n    }\n\n    function update(gameTime, timestamp) {\n        CanvasManager.clearContext(CANVAS_WIDTH, CANVAS_HEIGHT);\n\n        _.each(GameComponents, function(component) {\n            if(component.toDraw !== false) component.draw(gameTime, timestamp);\n            if(component.update !== false) component.update();\n        });\n    }\n\n    initialize();\n\n})(game.library.CanvasManager, game.library.SpriteManager, game.library.AudioManager, game.library.GameArray);"]}